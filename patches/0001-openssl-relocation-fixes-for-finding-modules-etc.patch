From eeac283697627e6ae3139b61ff349dc91ae0b8cc Mon Sep 17 00:00:00 2001
From: Mikko Rapeli <mikko.rapeli@linaro.org>
Date: Mon, 19 Sep 2022 13:33:55 +0100
Subject: [PATCH] openssl: relocation fixes for finding modules etc

openssl shared library is relocated into recipe specific
sysroots where paths are not known at compile time. Sadly
openssl doesn't find engines, modules, certificates etc based
on the deployed path and thus users need to manually set
OPENSSL_CONF, SSL_CERT_DIR, SSL_CERT_FILE, OPENSSL_ENGINES
and OPENSSL_MODULES variables for these use cases. Sometimes
the usage of openssl is even hidden behind many layers of
indirection and error messages are far from clear, like in the
case of python3-cryptography which is completely unusable until
OPENSSL_MODULES path is set correctly for legacy.so shared
library.

Work around these problems by making the path detection inside
openssl dynamic. Thus if environment variables are not found,
it will try to locate the libssl.so shared library with symbol
"OpenSSL_version" and use path to that file to construct relative
paths for modules, engines, config files and certificates.

Upstreaming to openssl is pending since I'd need a CLA signed for
that.

Signed-off-by: Mikko Rapeli <mikko.rapeli@linaro.org>
---
 ...config-file-based-on-shared-library-.patch |  98 +++++++++++++
 ...detect-module-path-from-shared-libra.patch | 130 ++++++++++++++++++
 ...tect-engine-path-from-shared-library.patch | 102 ++++++++++++++
 ...detect-cert-path-from-shared-library.patch | 121 ++++++++++++++++
 ...detect-cert-path-from-shared-library.patch | 110 +++++++++++++++
 .../openssl/openssl_3.0.5.bb                  |  16 +--
 6 files changed, 567 insertions(+), 10 deletions(-)
 create mode 100644 meta/recipes-connectivity/openssl/openssl/0001-conf_mod.c-find-config-file-based-on-shared-library-.patch
 create mode 100644 meta/recipes-connectivity/openssl/openssl/0002-provider_core.c-detect-module-path-from-shared-libra.patch
 create mode 100644 meta/recipes-connectivity/openssl/openssl/0003-eng_list.c-detect-engine-path-from-shared-library.patch
 create mode 100644 meta/recipes-connectivity/openssl/openssl/0004-x509-by_dir.c-detect-cert-path-from-shared-library.patch
 create mode 100644 meta/recipes-connectivity/openssl/openssl/0005-x509-by_store.c-detect-cert-path-from-shared-library.patch

diff --git a/meta/recipes-connectivity/openssl/openssl/0001-conf_mod.c-find-config-file-based-on-shared-library-.patch b/meta/recipes-connectivity/openssl/openssl/0001-conf_mod.c-find-config-file-based-on-shared-library-.patch
new file mode 100644
index 0000000000..e0072a5caa
--- /dev/null
+++ b/meta/recipes-connectivity/openssl/openssl/0001-conf_mod.c-find-config-file-based-on-shared-library-.patch
@@ -0,0 +1,98 @@
+From 147a4fa8829ebe61209c976d2aec4f273b9313b0 Mon Sep 17 00:00:00 2001
+From: Mikko Rapeli <mikko.rapeli@linaro.org>
+Date: Wed, 14 Sep 2022 17:07:19 +0000
+Subject: [PATCH 1/5] conf_mod.c: find config file based on shared library path
+
+If environment variable OPENSSL_CONF is not set, try to find
+the config file based on path relative to the shared library
+for symbol SSL_version. If libssl.so is in /usr/lib, then
+try to find config file from /usr/lib/ssl-3/openssl.cnf.
+
+Fixes relocation problems with openssl shared libraries.
+In yocto build environment, build tools are installed to
+paths which are specific to each SW component to be compiled.
+These paths can not be know in advance and setting a lot of
+openssl specific environment variables for all applications
+using openssl is error prone and non-trivial.
+
+Signed-off-by: Mikko Rapeli <mikko.rapeli@linaro.org>
+---
+ crypto/conf/conf_mod.c | 46 ++++++++++++++++++++++++++++++++++++++----
+ 1 file changed, 42 insertions(+), 4 deletions(-)
+
+Upstream-Status: Pending
+
+diff --git a/crypto/conf/conf_mod.c b/crypto/conf/conf_mod.c
+index 17bbbf7..cc89f8b 100644
+--- a/crypto/conf/conf_mod.c
++++ b/crypto/conf/conf_mod.c
+@@ -22,6 +22,17 @@
+ #include <openssl/trace.h>
+ #include <openssl/engine.h>
+ #include "conf_local.h"
++#include <sys/types.h>
++#include <sys/stat.h>
++#include <unistd.h>
++#include <string.h>
++#include <stdlib.h>
++#include <libgen.h>
++
++#define __USE_GNU
++#define _GNU_SOURCE
++#include <link.h>
++#include <dlfcn.h>
+ 
+ DEFINE_STACK_OF(CONF_MODULE)
+ DEFINE_STACK_OF(CONF_IMODULE)
+@@ -626,10 +637,19 @@ char *CONF_get1_default_config_file(void)
+ {
+     const char *t;
+     char *file, *sep = "";
+-    size_t size;
+-
+-    if ((file = ossl_safe_getenv("OPENSSL_CONF")) != NULL)
+-        return OPENSSL_strdup(file);
++    size_t size = 0;
++    char *f = NULL;
++    static char *ssl3 = "ssl-3";
++    struct stat s;
++    Dl_info info;
++
++    memset(&s, 0, sizeof(struct stat));
++    memset(&info, 0, sizeof(Dl_info));
++
++    if ((file = ossl_safe_getenv("OPENSSL_CONF")) != NULL) {
++        if (stat(file, &s) == 0)
++            return OPENSSL_strdup(file);
++    }
+ 
+     t = X509_get_default_cert_area();
+ #ifndef OPENSSL_SYS_VMS
+@@ -642,6 +662,24 @@ char *CONF_get1_default_config_file(void)
+         return NULL;
+     BIO_snprintf(file, size, "%s%s%s", t, sep, OPENSSL_CONF);
+ 
++    /* if file not found, create path based on shared library with our symbol */
++    if (stat(file, &s) == -1) {
++        if (dladdr(OpenSSL_version, &info)) {
++            f = OPENSSL_strdup(info.dli_fname);
++            if (f == NULL) {
++                return NULL;
++            }
++            char *dir = dirname(f);
++            size = strlen(dir) + strlen(sep) + strlen(ssl3) + strlen(sep) + strlen(OPENSSL_CONF) + 1;
++            file = OPENSSL_realloc(file, size);
++            if (file == NULL) {
++                OPENSSL_free(f);
++                return NULL;
++            }
++            BIO_snprintf(file, size, "%s%s%s%s%s", dir, sep, ssl3, sep, OPENSSL_CONF);
++            OPENSSL_free(f);
++        }
++    }
+     return file;
+ }
+ 
+-- 
+2.17.1
+
diff --git a/meta/recipes-connectivity/openssl/openssl/0002-provider_core.c-detect-module-path-from-shared-libra.patch b/meta/recipes-connectivity/openssl/openssl/0002-provider_core.c-detect-module-path-from-shared-libra.patch
new file mode 100644
index 0000000000..9ca6a3318b
--- /dev/null
+++ b/meta/recipes-connectivity/openssl/openssl/0002-provider_core.c-detect-module-path-from-shared-libra.patch
@@ -0,0 +1,130 @@
+From 84faebecb719d075d15e5bfb58cfb0209a125eaa Mon Sep 17 00:00:00 2001
+From: Mikko Rapeli <mikko.rapeli@linaro.org>
+Date: Thu, 15 Sep 2022 07:07:47 +0000
+Subject: [PATCH 2/5] provider_core.c: detect module path from shared library
+
+If OPENSSL_MODULES is not defined and compile time set
+MODULEDIR is not found, then openssl currently fails to load
+modules. Add a third option to detect OPENSSL_MODULES
+path based on shared library location. Shared library
+to search is libssl.so with "OpenSSL_version" symbol, which
+in most cases should be the current binary.
+
+This helps with binary relocation, when module paths may not be
+known in advance at compile time and it may be tricky to set
+OPENSSL_MODULES environment variable for all users of openssl
+shared libraries correctly.
+
+For example in yocto, build tools including openssl are installed to
+into SW component specifici paths. This patch fixes
+python3-pycryptography error from failing to load legacy.so
+module:
+
+$ python3 -c  "from OpenSSL import crypto"
+Traceback (most recent call last):
+  File "<string>", line 1, in <module>
+  File "/home/builder/poky/build_kirkstone/tmp/work/core2-64-poky-linux/busybox/1.35.0-r0/recipe-sysroot-native/usr/lib/python3.10/site-packages/OpenSSL/__init__.py", line 8, in <module>
+    from OpenSSL import crypto, SSL
+  File "/home/builder/poky/build_kirkstone/tmp/work/core2-64-poky-linux/busybox/1.35.0-r0/recipe-sysroot-native/usr/lib/python3.10/site-packages/OpenSSL/crypto.py", line 11, in <module>
+    from OpenSSL._util import (
+  File "/home/builder/poky/build_kirkstone/tmp/work/core2-64-poky-linux/busybox/1.35.0-r0/recipe-sysroot-native/usr/lib/python3.10/site-packages/OpenSSL/_util.py", line 5, in <module>
+    from cryptography.hazmat.bindings.openssl.binding import Binding
+  File "/home/builder/poky/build_kirkstone/tmp/work/core2-64-poky-linux/busybox/1.35.0-r0/recipe-sysroot-native/usr/lib/python3.10/site-packages/cryptography/hazmat/bindings/openssl/binding.py", line 228, in <module>
+    Binding.init_static_locks()
+  File "/home/builder/poky/build_kirkstone/tmp/work/core2-64-poky-linux/busybox/1.35.0-r0/recipe-sysroot-native/usr/lib/python3.10/site-packages/cryptography/hazmat/bindings/openssl/binding.py", line 188, in init_static_locks
+    cls._ensure_ffi_initialized()
+  File "/home/builder/poky/build_kirkstone/tmp/work/core2-64-poky-linux/busybox/1.35.0-r0/recipe-sysroot-native/usr/lib/python3.10/site-packages/cryptography/hazmat/bindings/openssl/binding.py", line 176, in _ensure_ffi_initialized
+    _openssl_assert(
+  File "/home/builder/poky/build_kirkstone/tmp/work/core2-64-poky-linux/busybox/1.35.0-r0/recipe-sysroot-native/usr/lib/python3.10/site-pa
+es/cryptography/hazmat/bindings/openssl/binding.py", line 90, in _openssl_assert
+    raise InternalError(
+cryptography.exceptions.InternalError: Unknown OpenSSL error. This error is commonly encountered when another library is not cleaning up t
+he OpenSSL error stack. If you are using cryptography with another library that uses OpenSSL try disabling it before reporting a bug. Otherwis
+e please file an issue at https://github.com/pyca/cryptography/issues with information on how to reproduce this. ([_OpenSSLErrorWithText(code=
+310378599, lib=37, reason=103, reason_text=b'error:12800067:DSO support routines::could not load the shared library'), _OpenSSLErrorWithText(c
+ode=310378599, lib=37, reason=103, reason_text=b'error:12800067:DSO support routines::could not load the shared library'), _OpenSSLErrorWithTe
+xt(code=126615813, lib=15, reason=786693, reason_text=b'error:078C0105:common libcrypto routines::init fail')])
+
+Signed-off-by: Mikko Rapeli <mikko.rapeli@linaro.org>
+---
+ crypto/provider_core.c | 46 +++++++++++++++++++++++++++++++++++++++++-
+ 1 file changed, 45 insertions(+), 1 deletion(-)
+
+Upstream-Status: Pending
+
+diff --git a/crypto/provider_core.c b/crypto/provider_core.c
+index d4ed2a5..cfd3d41 100644
+--- a/crypto/provider_core.c
++++ b/crypto/provider_core.c
+@@ -8,6 +8,18 @@
+  */
+ 
+ #include <assert.h>
++#include <sys/types.h>
++#include <sys/stat.h>
++#include <unistd.h>
++#include <string.h>
++#include <stdlib.h>
++#include <libgen.h>
++
++#define __USE_GNU
++#define _GNU_SOURCE
++#include <link.h>
++#include <dlfcn.h>
++
+ #include <openssl/core.h>
+ #include <openssl/core_dispatch.h>
+ #include <openssl/core_names.h>
+@@ -858,6 +870,15 @@ static int provider_init(OSSL_PROVIDER *prov)
+             const char *load_dir = NULL;
+             char *allocated_load_dir = NULL;
+             struct provider_store_st *store;
++            char *f = NULL;
++            size_t size = 0;
++            char *dir = NULL;
++            static char *osslmodules = "ossl-modules";
++            struct stat s;
++            Dl_info info;
++
++            memset(&s, 0, sizeof(struct stat));
++            memset(&info, 0, sizeof(Dl_info));
+ 
+             if ((prov->module = DSO_new()) == NULL) {
+                 /* DSO_new() generates an error already */
+@@ -882,9 +903,32 @@ static int provider_init(OSSL_PROVIDER *prov)
+ 
+             if (load_dir == NULL) {
+                 load_dir = ossl_safe_getenv("OPENSSL_MODULES");
++
+                 if (load_dir == NULL)
+                     load_dir = MODULESDIR;
+-            }
++
++                    if (stat(load_dir, &s) == -1) {
++                        /* try out relative path to shared lib with our symbol */
++                        if (dladdr(OpenSSL_version, &info)) {
++                            f = OPENSSL_strdup(info.dli_fname);
++                            if (f == NULL) {
++                                ERR_raise(ERR_LIB_CRYPTO, ERR_R_MALLOC_FAILURE);
++                                goto end;
++                            }
++                            dir = dirname(f);
++                            size = strlen(dir) + strlen("/") + strlen(osslmodules) + 1;
++                            allocated_load_dir = OPENSSL_realloc(allocated_load_dir, size);
++                            if (allocated_load_dir == NULL) {
++                                ERR_raise(ERR_LIB_CRYPTO, ERR_R_MALLOC_FAILURE);
++                                OPENSSL_free(f);
++                                goto end;
++                            }
++                            BIO_snprintf(allocated_load_dir, size, "%s%s%s", dir, "/", osslmodules);
++                            load_dir = allocated_load_dir;
++                            OPENSSL_free(f);
++                        }
++                    }
++                }
+ 
+             DSO_ctrl(prov->module, DSO_CTRL_SET_FLAGS,
+                      DSO_FLAG_NAME_TRANSLATION_EXT_ONLY, NULL);
+-- 
+2.17.1
+
diff --git a/meta/recipes-connectivity/openssl/openssl/0003-eng_list.c-detect-engine-path-from-shared-library.patch b/meta/recipes-connectivity/openssl/openssl/0003-eng_list.c-detect-engine-path-from-shared-library.patch
new file mode 100644
index 0000000000..6a4e507b1b
--- /dev/null
+++ b/meta/recipes-connectivity/openssl/openssl/0003-eng_list.c-detect-engine-path-from-shared-library.patch
@@ -0,0 +1,102 @@
+From 86633df8b99ec5e259eea5c1dbf1cd13f9de4500 Mon Sep 17 00:00:00 2001
+From: Mikko Rapeli <mikko.rapeli@linaro.org>
+Date: Fri, 16 Sep 2022 07:20:14 +0000
+Subject: [PATCH 3/5] eng_list.c: detect engine path from shared library
+
+If OPENSSL_ENGINES is not defined and compile time set
+ENGINESDIR is not found, then openssl currently fails to load
+the engines. Add a third option to detect OPENSSL_ENGINES
+path based on shared library location. Shared library
+to search is libssl.so with "OpenSSL_version" symbol, which
+in most cases should be the current binary.
+
+This helps with binary relocation, when module paths may not be
+known in advance at compile time and it may be tricky to set
+OPENSSL_ENGINES environment variable for all users of openssl
+shared libraries correctly.
+
+Tested with "openssl engine -c padlock" that padlock.so is
+found correctly from yocto recipe sysroot with relocated openssl
+binaries.
+
+Signed-off-by: Mikko Rapeli <mikko.rapeli@linaro.org>
+---
+ crypto/engine/eng_list.c | 46 ++++++++++++++++++++++++++++++++++++++++
+ 1 file changed, 46 insertions(+)
+
+Upstream-Status: Pending
+
+diff --git a/crypto/engine/eng_list.c b/crypto/engine/eng_list.c
+index 04c73c7..8549fa6 100644
+--- a/crypto/engine/eng_list.c
++++ b/crypto/engine/eng_list.c
+@@ -8,6 +8,18 @@
+  * https://www.openssl.org/source/license.html
+  */
+ 
++#include <sys/types.h>
++#include <sys/stat.h>
++#include <unistd.h>
++#include <string.h>
++#include <stdlib.h>
++#include <libgen.h>
++
++#define __USE_GNU
++#define _GNU_SOURCE
++#include <link.h>
++#include <dlfcn.h>
++
+ /* We need to use some engine deprecated APIs */
+ #define OPENSSL_SUPPRESS_DEPRECATED
+ 
+@@ -371,6 +383,16 @@ ENGINE *ENGINE_by_id(const char *id)
+ {
+     ENGINE *iterator;
+     char *load_dir = NULL;
++    char *f = NULL;
++    size_t size = 0;
++    char *dir = NULL;
++    static char *engines3 = "engines-3";
++    struct stat s;
++    Dl_info info;
++
++    memset(&s, 0, sizeof(struct stat));
++    memset(&info, 0, sizeof(Dl_info));
++
+     if (id == NULL) {
+         ERR_raise(ERR_LIB_ENGINE, ERR_R_PASSED_NULL_PARAMETER);
+         return NULL;
+@@ -415,6 +437,30 @@ ENGINE *ENGINE_by_id(const char *id)
+     if (strcmp(id, "dynamic")) {
+         if ((load_dir = ossl_safe_getenv("OPENSSL_ENGINES")) == NULL)
+             load_dir = ENGINESDIR;
++
++        load_dir = OPENSSL_strdup(load_dir);
++
++        if (stat(load_dir, &s) == -1) {
++            /* try out relative path to shared lib with our symbol */
++            if (dladdr(OpenSSL_version, &info)) {
++                f = OPENSSL_strdup(info.dli_fname);
++                if (f == NULL) {
++                    ERR_raise(ERR_LIB_ENGINE, ERR_R_MALLOC_FAILURE);
++                    return NULL;
++                }
++                dir = dirname(f);
++                size = strlen(dir) + strlen("/") + strlen(engines3) + 1;
++                load_dir = OPENSSL_realloc(load_dir, size);
++                if (load_dir == NULL) {
++                    ERR_raise(ERR_LIB_ENGINE, ERR_R_MALLOC_FAILURE);
++                    OPENSSL_free(f);
++                    return NULL;
++                }
++                BIO_snprintf(load_dir, size, "%s%s%s", dir, "/", engines3);
++                OPENSSL_free(f);
++            }
++        }
++
+         iterator = ENGINE_by_id("dynamic");
+         if (!iterator || !ENGINE_ctrl_cmd_string(iterator, "ID", id, 0) ||
+             !ENGINE_ctrl_cmd_string(iterator, "DIR_LOAD", "2", 0) ||
+-- 
+2.17.1
+
diff --git a/meta/recipes-connectivity/openssl/openssl/0004-x509-by_dir.c-detect-cert-path-from-shared-library.patch b/meta/recipes-connectivity/openssl/openssl/0004-x509-by_dir.c-detect-cert-path-from-shared-library.patch
new file mode 100644
index 0000000000..92abc9e000
--- /dev/null
+++ b/meta/recipes-connectivity/openssl/openssl/0004-x509-by_dir.c-detect-cert-path-from-shared-library.patch
@@ -0,0 +1,121 @@
+From 6c97a921a361fbe4784a0f611dffcde19034cd6d Mon Sep 17 00:00:00 2001
+From: Mikko Rapeli <mikko.rapeli@linaro.org>
+Date: Fri, 16 Sep 2022 14:05:54 +0000
+Subject: [PATCH 4/5] x509/by_dir.c: detect cert path from shared library
+
+If SSL_CERT_DIR is not defined and compile time set
+path is not found, then openssl currently fails to load
+the certificates. Add a third option to detect certificate
+path based on shared library location. Shared library
+to search is libssl.so with "OpenSSL_version" symbol, which
+in most cases should be the current binary. If libssl.so is
+in /usr/lib, then certificates are searched from /usr/lib/ssl-3/certs
+directory.
+
+This helps with binary relocation, when module paths may not be
+known in advance at compile time and it may be tricky to set
+SSL_CERT_DIR environment variable for all users of openssl
+shared libraries correctly.
+
+Signed-off-by: Mikko Rapeli <mikko.rapeli@linaro.org>
+---
+ crypto/x509/by_dir.c | 62 +++++++++++++++++++++++++++++++++++++++-----
+ 1 file changed, 56 insertions(+), 6 deletions(-)
+
+Upstream-Status: Pending
+
+diff --git a/crypto/x509/by_dir.c b/crypto/x509/by_dir.c
+index 258ad51..cb29345 100644
+--- a/crypto/x509/by_dir.c
++++ b/crypto/x509/by_dir.c
+@@ -23,6 +23,16 @@
+ #include <errno.h>
+ #include <sys/types.h>
+ 
++#include <unistd.h>
++#include <string.h>
++#include <stdlib.h>
++#include <libgen.h>
++
++#define __USE_GNU
++#define _GNU_SOURCE
++#include <link.h>
++#include <dlfcn.h>
++
+ #ifndef OPENSSL_NO_POSIX_IO
+ # include <sys/stat.h>
+ #endif
+@@ -84,17 +94,56 @@ static int dir_ctrl(X509_LOOKUP *ctx, int cmd, const char *argp, long argl,
+ {
+     int ret = 0;
+     BY_DIR *ld = (BY_DIR *)ctx->method_data;
++    char *f = NULL;
++    char *d = NULL;
++    size_t size = 0;
++    char *dir = NULL;
++    char *ssl3 = "ssl-3";
++    char *certs = "certs";
++    char *sep = "/";
++    struct stat s;
++    Dl_info info;
++
++    memset(&s, 0, sizeof(struct stat));
++    memset(&info, 0, sizeof(Dl_info));
+ 
+     switch (cmd) {
+     case X509_L_ADD_DIR:
+         if (argl == X509_FILETYPE_DEFAULT) {
+-            const char *dir = ossl_safe_getenv(X509_get_default_cert_dir_env());
+-
++            dir = ossl_safe_getenv(X509_get_default_cert_dir_env());
+             if (dir)
+-                ret = add_cert_dir(ld, dir, X509_FILETYPE_PEM);
+-            else
+-                ret = add_cert_dir(ld, X509_get_default_cert_dir(),
+-                                   X509_FILETYPE_PEM);
++                dir = OPENSSL_strdup(dir);
++            else {
++                dir = OPENSSL_strdup(X509_get_default_cert_dir());
++
++                if (dir == NULL)
++                    goto error_out;
++
++                /* fall back to relative path to shared lib with our symbol */
++                if (stat(dir, &s) == -1) {
++                    if (dladdr(OpenSSL_version, &info)) {
++                        f = OPENSSL_strdup(info.dli_fname);
++                        if (f == NULL) {
++                            ERR_raise(ERR_LIB_X509, ERR_R_MALLOC_FAILURE);
++                            OPENSSL_free(dir);
++                            goto error_out;
++                        }
++                        d = dirname(f);
++                        size = strlen(d) + strlen(sep) + strlen(ssl3) + strlen(sep) + strlen(certs) + 1;
++                        dir = OPENSSL_realloc(dir, size);
++                        if (dir == NULL) {
++                            ERR_raise(ERR_LIB_X509, ERR_R_MALLOC_FAILURE);
++                            OPENSSL_free(f);
++                            OPENSSL_free(dir);
++                            goto error_out;
++                        }
++                    BIO_snprintf(dir, size, "%s%s%s%s%s", d, sep, ssl3, sep, certs);
++                    OPENSSL_free(f);
++                    }
++                }
++            }
++            ret = add_cert_dir(ld, dir,
++                               X509_FILETYPE_PEM);
+             if (!ret) {
+                 ERR_raise(ERR_LIB_X509, X509_R_LOADING_CERT_DIR);
+             }
+@@ -102,6 +151,7 @@ static int dir_ctrl(X509_LOOKUP *ctx, int cmd, const char *argp, long argl,
+             ret = add_cert_dir(ld, argp, (int)argl);
+         break;
+     }
++error_out:
+     return ret;
+ }
+ 
+-- 
+2.17.1
+
diff --git a/meta/recipes-connectivity/openssl/openssl/0005-x509-by_store.c-detect-cert-path-from-shared-library.patch b/meta/recipes-connectivity/openssl/openssl/0005-x509-by_store.c-detect-cert-path-from-shared-library.patch
new file mode 100644
index 0000000000..64345e1bcb
--- /dev/null
+++ b/meta/recipes-connectivity/openssl/openssl/0005-x509-by_store.c-detect-cert-path-from-shared-library.patch
@@ -0,0 +1,110 @@
+From 85026b8376581db81f58ef61df56a60d672b194f Mon Sep 17 00:00:00 2001
+From: Mikko Rapeli <mikko.rapeli@linaro.org>
+Date: Fri, 16 Sep 2022 15:14:12 +0000
+Subject: [PATCH 5/5] x509/by_store.c: detect cert path from shared library
+
+If SSL_CERT_DIR is not defined and compile time set
+path is not found, then openssl currently fails to load
+the certificates. Add a third option to detect certificate
+path based on shared library location. Shared library
+to search is libssl.so with "OpenSSL_version" symbol, which
+in most cases should be the current binary. If libssl.so is
+in /usr/lib, then certificates are searched from /usr/lib/ssl-3/certs
+directory.
+
+This helps with binary relocation, when module paths may not be
+known in advance at compile time and it may be tricky to set
+SSL_CERT_DIR environment variable for all users of openssl
+shared libraries correctly.
+
+Signed-off-by: Mikko Rapeli <mikko.rapeli@linaro.org>
+---
+ crypto/x509/by_store.c | 52 +++++++++++++++++++++++++++++++++++++++---
+ 1 file changed, 49 insertions(+), 3 deletions(-)
+
+Upstream-Status: Pending
+
+diff --git a/crypto/x509/by_store.c b/crypto/x509/by_store.c
+index 050735c..8713282 100644
+--- a/crypto/x509/by_store.c
++++ b/crypto/x509/by_store.c
+@@ -7,6 +7,18 @@
+  * https://www.openssl.org/source/license.html
+  */
+ 
++#include <sys/types.h>
++#include <sys/stat.h>
++#include <unistd.h>
++#include <string.h>
++#include <stdlib.h>
++#include <libgen.h>
++
++#define __USE_GNU
++#define _GNU_SOURCE
++#include <link.h>
++#include <dlfcn.h>
++
+ #include <openssl/store.h>
+ #include "internal/cryptlib.h"
+ #include "crypto/x509.h"
+@@ -109,6 +121,18 @@ static int by_store_ctrl_ex(X509_LOOKUP *ctx, int cmd, const char *argp,
+                             long argl, char **retp, OSSL_LIB_CTX *libctx,
+                             const char *propq)
+ {
++    char *f = NULL;
++    char *data = NULL;
++    char *ssl3 = "ssl-3";
++    char *certs = "certs";
++    char *sep = "/";
++    size_t size = 0;
++    struct stat s;
++    Dl_info info;
++
++    memset(&s, 0, sizeof(struct stat));
++    memset(&info, 0, sizeof(Dl_info));
++
+     switch (cmd) {
+     case X509_L_ADD_STORE:
+         /* If no URI is given, use the default cert dir as default URI */
+@@ -117,13 +141,35 @@ static int by_store_ctrl_ex(X509_LOOKUP *ctx, int cmd, const char *argp,
+         if (argp == NULL)
+             argp = X509_get_default_cert_dir();
+ 
+-        {
+-            STACK_OF(OPENSSL_STRING) *uris = X509_LOOKUP_get_method_data(ctx);
+-            char *data = OPENSSL_strdup(argp);
++        if (argp) {
++            data = OPENSSL_strdup(argp);
+ 
+             if (data == NULL) {
+                 return 0;
+             }
++
++            /* fall back to relative path to shared lib with our symbol */
++            if (stat(data, &s) == -1) {
++                if (dladdr(OpenSSL_version, &info)) {
++                    f = OPENSSL_strdup(info.dli_fname);
++                    if (f == NULL) {
++                        return 0;
++                    }
++                    char *d = dirname(f);
++                    size = strlen(d) + strlen(sep) + strlen(ssl3) + strlen(sep) + strlen(certs) + 1;
++                    data = OPENSSL_realloc(data, size);
++                    if (data == NULL) {
++                        OPENSSL_free(f);
++                        return 0;
++                    }
++                    BIO_snprintf(data, size, "%s%s%s%s%s", d, sep, ssl3, sep, certs);
++                    stat(data, &s);
++                    OPENSSL_free(f);
++                }
++            }
++
++            STACK_OF(OPENSSL_STRING) *uris = X509_LOOKUP_get_method_data(ctx);
++
+             if (uris == NULL) {
+                 uris = sk_OPENSSL_STRING_new_null();
+                 X509_LOOKUP_set_method_data(ctx, uris);
+-- 
+2.17.1
+
diff --git a/meta/recipes-connectivity/openssl/openssl_3.0.5.bb b/meta/recipes-connectivity/openssl/openssl_3.0.5.bb
index 04aff04fab..05ef3abb5f 100644
--- a/meta/recipes-connectivity/openssl/openssl_3.0.5.bb
+++ b/meta/recipes-connectivity/openssl/openssl_3.0.5.bb
@@ -12,7 +12,12 @@ SRC_URI = "http://www.openssl.org/source/openssl-${PV}.tar.gz \
            file://0001-buildinfo-strip-sysroot-and-debug-prefix-map-from-co.patch \
            file://afalg.patch \
            file://0001-Configure-do-not-tweak-mips-cflags.patch \
-           "
+           file://0001-conf_mod.c-find-config-file-based-on-shared-library-.patch \
+           file://0002-provider_core.c-detect-module-path-from-shared-libra.patch \
+           file://0003-eng_list.c-detect-engine-path-from-shared-library.patch \
+           file://0004-x509-by_dir.c-detect-cert-path-from-shared-library.patch \
+           file://0005-x509-by_store.c-detect-cert-path-from-shared-library.patch \
+"
 
 SRC_URI:append:class-nativesdk = " \
            file://environment.d-openssl.sh \
@@ -163,15 +168,6 @@ do_install () {
 	ln -sf ${@oe.path.relative('${libdir}/ssl-3', '${sysconfdir}/ssl/openssl.cnf')} ${D}${libdir}/ssl-3/openssl.cnf
 }
 
-do_install:append:class-native () {
-	create_wrapper ${D}${bindir}/openssl \
-	    OPENSSL_CONF=${libdir}/ssl-3/openssl.cnf \
-	    SSL_CERT_DIR=${libdir}/ssl-3/certs \
-	    SSL_CERT_FILE=${libdir}/ssl-3/cert.pem \
-	    OPENSSL_ENGINES=${libdir}/engines-3 \
-	    OPENSSL_MODULES=${libdir}/ossl-modules
-}
-
 do_install:append:class-nativesdk () {
 	mkdir -p ${D}${SDKPATHNATIVE}/environment-setup.d
 	install -m 644 ${WORKDIR}/environment.d-openssl.sh ${D}${SDKPATHNATIVE}/environment-setup.d/openssl.sh
-- 
2.17.1

