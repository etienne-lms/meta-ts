From fe888b8f776deff650f1a199aeba86bad1fa94ac Mon Sep 17 00:00:00 2001
From: Masami Hiramatsu <masami.hiramatsu@linaro.org>
Date: Thu, 10 Dec 2020 13:30:37 +0900
Subject: [PATCH 3/3] fiptool: Accept fixed offset for image

Accept fixed offset for each image by "filename@offset"
syntax. Note that the data of the file with the fixed
offset is not included in the payload. This is useful
for specifying the image which is written in given
offset separetely.

Signed-off-by: Masami Hiramatsu <masami.hiramatsu@linaro.org>
---
 tools/fiptool/fiptool.c | 38 +++++++++++++++++++++++++++++---------
 tools/fiptool/fiptool.h |  1 +
 2 files changed, 30 insertions(+), 9 deletions(-)

diff --git a/tools/fiptool/fiptool.c b/tools/fiptool/fiptool.c
index d92c31d7f..4b77f9516 100644
--- a/tools/fiptool/fiptool.c
+++ b/tools/fiptool/fiptool.c
@@ -384,28 +384,44 @@ static int parse_fip(const char *filename, fip_toc_header_t *toc_header_out)
 
 static image_t *read_image_from_file(const uuid_t *uuid, const char *filename)
 {
+	unsigned long offset = 0;
 	struct BLD_PLAT_STAT st;
+	char *_filename, *p;
 	image_t *image;
 	FILE *fp;
 
 	assert(uuid != NULL);
 	assert(filename != NULL);
 
-	fp = fopen(filename, "rb");
+	_filename = strdup(filename);
+	p = strchr(_filename, '@');
+	if (p) {	/* File has fixed offset */
+		*p = '\0';
+		offset = strtoul(++p, &p, 16);
+		if (offset == ULONG_MAX && errno == ERANGE)
+			log_errx("Offset of %s out of range", filename);
+		if (p && *p != '\0')
+			log_errx("Wrong fixed offset format", filename);
+		log_dbgx("\t file %s has a fixed offset @%lx.", filename, offset);
+	}
+
+	fp = fopen(_filename, "rb");
 	if (fp == NULL)
-		log_err("fopen %s", filename);
+		log_err("fopen %s", _filename);
 
 	if (fstat(fileno(fp), &st) == -1)
-		log_errx("fstat %s", filename);
+		log_errx("fstat %s", _filename);
 
 	image = xzalloc(sizeof(*image), "failed to allocate memory for image");
 	image->toc_e.uuid = *uuid;
 	image->buffer = xmalloc(st.st_size, "failed to allocate image buffer");
 	if (fread(image->buffer, 1, st.st_size, fp) != st.st_size)
-		log_errx("Failed to read %s", filename);
+		log_errx("Failed to read %s", _filename);
 	image->toc_e.size = st.st_size;
+	image->offset = offset;
 
 	fclose(fp);
+	free(_filename);
 	return image;
 }
 
@@ -539,11 +555,15 @@ static int pack_images(const char *filename, uint64_t toc_flags, unsigned long a
 
 		if (image == NULL)
 			continue;
-		payload_size += image->toc_e.size;
-		entry_offset = (entry_offset + align - 1) & ~(align - 1);
-		image->toc_e.offset_address = entry_offset;
+		if (image->offset) {
+			image->toc_e.offset_address = image->offset;
+		} else {
+			payload_size += image->toc_e.size;
+			entry_offset = (entry_offset + align - 1) & ~(align - 1);
+			image->toc_e.offset_address = entry_offset;
+			entry_offset += image->toc_e.size;
+		}
 		*toc_entry++ = image->toc_e;
-		entry_offset += image->toc_e.size;
 	}
 
 	/*
@@ -570,7 +590,7 @@ static int pack_images(const char *filename, uint64_t toc_flags, unsigned long a
 	for (desc = image_desc_head; desc != NULL; desc = desc->next) {
 		image_t *image = desc->image;
 
-		if (image == NULL)
+		if (image == NULL || image->offset)
 			continue;
 		if (fseek(fp, image->toc_e.offset_address, SEEK_SET))
 			log_errx("Failed to set file position");
diff --git a/tools/fiptool/fiptool.h b/tools/fiptool/fiptool.h
index 88c4a7edb..ffe53df63 100644
--- a/tools/fiptool/fiptool.h
+++ b/tools/fiptool/fiptool.h
@@ -43,6 +43,7 @@ typedef struct image_desc {
 typedef struct image {
 	struct fip_toc_entry toc_e;
 	void                *buffer;
+	unsigned long        offset;
 } image_t;
 
 typedef struct cmd {
-- 
2.17.1

